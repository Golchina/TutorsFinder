// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
let receivedMessagesNumber = 0
// –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –∑–∞ —Ä–∞–∑ (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å messages_to_fetch –≤ ChatConsumer)
let messagesPerFetch = 10

const conversationId = JSON.parse(document.getElementById('conversation_id').textContent);
const userId = JSON.parse(document.getElementById('user_id').textContent);
// C–æ–∑–¥–∞–µ–º –≤–µ–±—Å–æ–∫–µ—Ç
const chatSocket = new WebSocket(
    'ws://'
    + window.location.host
    + '/ws/chat/'
    + conversationId
    + '/'
);

// –ü—Ä–æ–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
chatSocket.onopen = function(e) {
    chatSocket.send(JSON.stringify({
        'command': 'fetch_content',
        'initiator': userId,
        'receivedMessagesNumber': receivedMessagesNumber
    }));
}

// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤–µ–±—Å–æ–∫–µ—Ç–∞
chatSocket.onmessage = function(e) {
    const data = JSON.parse(e.data);
    let createdAt = formatCreatedAt(data.createdAt)
    if (data.command === 'send_message'){
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        let appendType = 'append'
        appendMessage(data, appendType)
        receivedMessagesNumber += 1
    } else if (data.command === 'fetch_content' && data.newContent.length > 0) {
        // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏ –≤–≤–µ—Ä—Ö
        let appendType = 'prepend'
        receivedMessagesNumber += messagesPerFetch
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        let messagesDiv = document.getElementById('messages_list');
        let prevScrollHeight = messagesDiv.scrollHeight;
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        data.newContent.forEach(element => appendMessage(element, appendType))
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        let newScrollHeight = messagesDiv.scrollHeight;
        let scrollTop = messagesDiv.scrollTop + (newScrollHeight - prevScrollHeight);
        messagesDiv.scrollTop = scrollTop;
    } else if (data.command === 'delete_message') {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        removeMessageFromDom(data.messageId)
    } else if (data.command === 'mark_message_seen'){
        // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        let row = document.querySelector(`[data-messageId="${data.messageId}"]`);
        if (row){
            row.dataset.isseen = 'true';
            if (row.dataset.authorid == userId){
                // –ú–µ–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—É—é –≥–∞–ª–æ—á–∫—É –Ω–∞ –¥–≤–æ–π–Ω—É—é
                let notSeen = row.querySelector('.message-not-seen')
                notSeen.style.display = 'none'
                let seen = row.querySelector('.message-seen')
                seen.style.display = 'inline'
                console.log('changed style', data.messageId)
            } else {
              setTimeout(function() {
                $(".message-content").removeClass("border border-primary");
              }, 3000);
            }
        }
    }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
chatSocket.onclose = function(e) {
    console.error('Chat socket closed unexpectedly');
};

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
let imageInput = document.querySelector('#image-input');
let imagePreview = document.querySelector('#image-preview');
let uploadedImages = [];
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π = imageInput –Ω–µ –±—É–¥–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
if (imageInput){
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ imageInput
    imageInput.addEventListener('change', function(event) {
      let files = event.target.files;
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω –∏ –≤ —Å–ø–∏—Å–æ–∫ uploadedImages
      for (let i = 0; i < files.length; i++) {
        let file = files[i];
        let reader = new FileReader();

        reader.addEventListener('load', function(event) {
          const imageUrl = event.target.result;
          const imageElement = createImageElement(file, imageUrl);
          uploadedImages.push(file);
          document.querySelector('#image-preview').appendChild(imageElement);
        });

        reader.readAsDataURL(file);
      }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–¥ —á–∞—Ç–æ–º
    function createImageElement(file, imageUrl) {
      const containerElement = document.createElement('div');
      const imageElement = document.createElement('img');
      const removeButton = document.createElement('button');
      const removeLabel = document.createElement('label');
      const removeIcon = document.createElement('i');

      containerElement.classList.add('image-container');
      containerElement.classList.add('ml-2');
      imageElement.src = imageUrl;
      imageElement.style.width = '50px'
      removeButton.style.display = 'none';
      removeButton.id = 'remove-button'
      removeLabel.htmlFor = 'remove-button'
      removeLabel.appendChild(removeIcon)
      removeIcon.classList.add('remove-icon', 'fas', 'fa-times');
      removeButton.addEventListener('click', function() {
        const index = uploadedImages.findIndex(function(item) {
          return item.name === file.name;
        });
        if (index !== -1) {
          uploadedImages.splice(index, 1);
          containerElement.remove();
        }
      });

      containerElement.appendChild(imageElement);
      containerElement.appendChild(removeButton);
      containerElement.appendChild(removeLabel);
      return containerElement;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ enter
    document.querySelector('#message_input').addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
          document.querySelector('#send_message').click();
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    document.querySelector('#message-form').addEventListener('submit', function(e) {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ submit
      e.preventDefault();
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–ø—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      let messageInputDom = document.querySelector('#message_input');
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      let message = messageInputDom.value;

      let formData = new FormData($(this)[0]);
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      if (uploadedImages.length > 0){
          sendMessageWithImages(message, userId, uploadedImages, formData)
      }
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ–ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      else if (message.trim().length > 0) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –≤–µ–±—Å–æ–∫–µ—Ç—É
        chatSocket.send(JSON.stringify({
        'command': 'send_message',
        'message': message,
        'authorId': userId,
        }));
      }
      // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      messageInputDom.value = '';
      uploadedImages.length = 0

    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é ajax, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö url –ø–æ –≤–µ–±—Å–æ–∫–µ—Ç—É
    function sendMessageWithImages(message, userId, images, formData){
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ formData
      for (let i = 0; i < images.length; i++) {
        formData.append('image', images[i]);
      }
      // url, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è view –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      let uploadFileUrl = 'http://' + window.location.host + '/chats/upload_images/';

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º csrf —Ç–æ–∫–µ–Ω
      let csrftoken = getCookie('csrftoken');
      $.ajaxSetup({
        headers: { "X-CSRFToken": csrftoken }
      });
      // ajax –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è) –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {id: url}
      // –∑–∞—Ç–µ–º –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ –≤–µ–±—Å–æ–∫–µ—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ª–æ–≤–∞—Ä—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      $.ajax({
        url: uploadFileUrl,
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
                  var urls = response.urls;
                    chatSocket.send(JSON.stringify({
                        'command': 'send_message',
                        'message': message,
                        'authorId': userId,
                        'images': urls
                    }));
                    let imgPreview = document.querySelector('#image-preview')
                    imgPreview.innerHTML = ''
                    document.querySelector('#message-form').reset();
        },
        error: function(xhr, status, error) {
          console.log(error);
        }
      });
    }

    // Emoji
    const emojis = [
      "üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä", "üòã", "üòé", "üòç", "üòò", "üòú", "üòù", "ü§ë", "ü§ó", "ü§î", "ü§ê", "ü§¢", "ü§Æ", "ü§Ø", "üò∑", "ü§í", "ü§ï", "üòµ", "ü•≥", "ü•∫", "ü§©", "ü§™", "ü§¨", "ü•¥", "ü•µ", "ü•∂"
    ];
    // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞–ø–æ–ª–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å emoji
    const emojiPopup = document.getElementById("emoji-popup");
    const emojiContainer = emojiPopup.querySelector("div");
    for (let emoji of emojis) {
      const button = document.createElement("button");
      button.innerHTML = emoji;
      button.style.fontFamily = "Segoe UI Emoji";
      button.style.fontSize = "1.5em";
      button.style.backgroundColor =  "white";
      button.style.border = "none";
      button.type = "button"
      // –ü–æ –∫–ª–∏–∫—É –Ω–∞ emoji –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ emoji
      button.addEventListener("click", function(e) {
        e.preventDefault()
        const input = document.getElementById("message_input");
        input.value += emoji;
        emojiPopup.style.display = "none";
      });
      emojiContainer.appendChild(button);
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ emoji –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∑–Ω–∞—á–æ–∫ –≤ —á–∞—Ç–µ
    document.getElementById("emoji-btn").addEventListener("click", function() {
      if (emojiPopup.style.display == "block")
        emojiPopup.style.display = "none";
      else
        emojiPopup.style.display = "block";
    });

    // –£–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ emoji –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.addEventListener("click", function(event) {
      const isClickInsideEmojiPopup = emojiPopup.contains(event.target);
      const isClickInsideEmojiButton = event.target.id === "emoji-btn";
      if (!isClickInsideEmojiPopup && !isClickInsideEmojiButton) {
        emojiPopup.style.display = "none";
      }
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
document.addEventListener("DOMContentLoaded", function() {
  const messageTable = document.querySelector(".message-table");

    // –ü–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  messageTable.addEventListener("mouseover", function(event) {
    const target = event.target;
    if (target.parentNode.classList.contains("message-row") || target.classList.contains("message-row")) {
      const deleteMessage = target.querySelector(".delete-message");
      deleteMessage.style.display = "inline-block";
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å
    target.addEventListener("mouseleave", function(event) {
    const target = event.target;
    if (target.parentNode.classList.contains("message-row") || target.classList.contains("message-row")) {
      const deleteMessage = target.querySelector(".delete-message");
      deleteMessage.style.display = "none";
    }
    });
  });

  messageTable.addEventListener("click", function(event) {
    const target = event.target;

    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å
    if (target.classList.contains("delete-message")) {
      const row = target.closest(".message-row");
      const confirmDelete = row.querySelector(".confirm-delete");
      const cancelDelete = row.querySelector(".cancel-delete");

      target.style.display = "none";
      confirmDelete.style.display = "inline-block";
      cancelDelete.style.display = "inline-block";
    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
    } else if (target.classList.contains("cancel-delete")) {
      const row = target.closest(".message-row");
      const deleteMessage = row.querySelector(".delete-message");
      const confirmDelete = row.querySelector(".confirm-delete");
      const cancelDelete = row.querySelector(".cancel-delete");

      confirmDelete.style.display = "none";
      cancelDelete.style.display = "none";
      deleteMessage.style.display = "inline-block";
    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    } else if (target.classList.contains("confirm-delete")) {
      const row = target.closest(".message-row");
      removeMessage(row); //assuming that removeMessage() is defined elsewhere
    }
  });
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
function removeMessage(row){
    let messageId = row.dataset.messageid
    chatSocket.send(JSON.stringify({
        'command': 'delete_message',
        'messageId': messageId
        }));
}

// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function removeMessageFromDom(messageId){
    row = document.querySelector(`[data-messageId="${messageId}"]`);
    row.remove()
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –≤ –∫–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞
function appendMessage(messageData, appendType) {
    let messages_list = $('#messages_list')

    let messageElement = ``
    let imageElements = ``
    let messageBlock
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let seenElement
    if (messageData.isSeen){
        seenElement = `
          <i class="fa fa-check message-not-seen" style="display: none;"></i>
          <i class="fa fa-check-double message-seen" style=""></i>
        `
    } else {
        seenElement = `
          <i class="fa fa-check message-not-seen" style=""></i>
          <i class="fa fa-check-double message-seen" style="display: none;"></i>
        `
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º—ã –µ–≥–æ –∏–ª–∏ –ø–æ–ª—É—á–∏–ª–∏
    if (messageData.authorId == userId){
        // –≠–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if (messageData.message && messageData.message.trim()){
            messageElement = `<p class="small p-2 me-3 mb-1 bg-primary text-white ml-auto" style="border-radius: 10px; word-wrap: break-word; word-break: break-word;">${messageData.message}</p>`
        }
        // –≠–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (messageData.images){
            let imageBaseLink = 'http://' + window.location.host
            for (const [key, value] of Object.entries(messageData.images)) {
                imageElements +=
                    `<p class="small p-2 ms-3 mb-1 bg-primary text-white"
                        style="border-radius: 10px; word-wrap: break-word; word-break: break-word;">
                     <a href="${imageBaseLink}${value}" class="">
                        <img width="200" src="${imageBaseLink}${value}" alt="Image">
                     </a>
                     </p>`
            }
        }
        // –û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        messageBlock = `
              <div data-messageId="${messageData.messageId}" data-authorId="${messageData.authorId}" data-isSeen="${messageData.isSeen}" class="message-row d-flex flex-row justify-content-end">
                <div class="d-flex flex-column">
                  ${messageElement}
                  ${imageElements}
                  <p class="small me-3 mb-3 rounded-3 text-muted ml-auto">
                      <i class="fa fa-trash delete-message" style="display: none;"></i>
                      <i class="fa fa-check confirm-delete" style="display: none;"></i>
                      <i class="fa fa-times cancel-delete" style="display: none;"></i>
                      ${formatCreatedAt(messageData.createdAt)}
                      ${seenElement}
                  </p>

                </div>
                <img src="${messageData.authorProfileImage}"
                  alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" class="rounded-circle ml-2" style="object-fit: cover; width: 45px; height: 45px;">
              </div>
        `
    } else {
        // –≠–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–æ/–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
        let unseenClass
        if (messageData.isSeen)
            unseenClass = ''
        else if (messageData.command != 'send_message')
            unseenClass = 'border border-primary'
        // –≠–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if (messageData.message && messageData.message.trim()){
            messageElement = `<p class="message-content small p-2 ms-3 mb-1 mr-auto ${unseenClass}" style="background-color: #f5f6f7; border-radius: 10px; word-wrap: break-word; word-break: break-word;">${messageData.message}</p>`
        }
        // –≠–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (messageData.images){
            let imageBaseLink = 'http://' + window.location.host
            for (const [key, value] of Object.entries(messageData.images)) {
                imageElements +=
                    `<p class="message-content small p-2 ms-3 mb-1 ${unseenClass}"
                        style="border-radius: 10px; word-wrap: break-word; word-break: break-word; background-color: #f5f6f7;">
                     <a href="${imageBaseLink}${value}" class="">
                        <img width="200" src="${imageBaseLink}${value}" alt="Image">
                     </a>
                     </p>`
            }
        }
        // –û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        messageBlock = `
              <div data-messageId="${messageData.messageId}" data-authorId="${messageData.authorId}" data-isSeen="${messageData.isSeen}" class="message-row d-flex flex-row justify-content-start">
                <img src="${messageData.authorProfileImage}"
                  alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" class="rounded-circle mr-2" style="object-fit: cover; width: 45px; height: 45px;">
                <div class="d-flex flex-column">
                  ${messageElement}
                  ${imageElements}
                  <p class="small ms-3 mb-3 rounded-3 text-muted float-end">
                      <i class="fa fa-trash delete-message" style="display: none;"></i>
                      <i class="fa fa-check confirm-delete" style="display: none;"></i>
                      <i class="fa fa-times cancel-delete" style="display: none;"></i>
                      ${formatCreatedAt(messageData.createdAt)}</p>
                </div>
              </div>
        `
    }
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞
    if (appendType === 'append') {
        // –°–º–æ—Ç—Ä–∏–º, –ø—Ä–æ–ª–∏—Å—Ç–∞–Ω—ã –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω–∏–∑
        let myDiv = document.getElementById('messages_list');
        let toScroll = myDiv.scrollTop + myDiv.clientHeight >= myDiv.scrollHeight;
        // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages_list.append($(messageBlock));
        // –ü—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–∏–∑, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª–∏ –ø—Ä–æ–ª–∏—Å—Ç–∞–Ω—ã –≤–Ω–∏–∑
        if (toScroll){
        myDiv.scrollTop = myDiv.scrollHeight;
        }
    } else
        messages_list.prepend($(messageBlock));
}


// –ü—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–∏–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    var myDiv = document.getElementById('messages_list');
    myDiv.scrollTop = myDiv.scrollHeight;
};


// –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let content = document.getElementById("messages_list");
function handleScroll() {
    if (content.scrollTop == 0) {
        chatSocket.send(JSON.stringify({
            'command': 'fetch_content',
            'initiator': userId,
            'receivedMessagesNumber': receivedMessagesNumber
        }));
    }
}
content.addEventListener("scroll", handleScroll);


// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
function formatCreatedAt(createdAtStr){
    let options = {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
    };
    let createdAt = new Date(Date.parse(createdAtStr)).toLocaleString("ru", options).replace('–≤ ', '');
    return createdAt
}


// –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function messageSeen(messageId) {
  let messageRow = document.querySelector(`[data-messageId="${messageId}"]`);
  if (messageRow.dataset.isseen === 'false' && (messageRow.dataset.authorid != userId)) {
    console.log('seen')
    chatSocket.send(JSON.stringify({
        'command': 'mark_message_seen',
        'messageId': messageId
    }));
  }
}


// –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
const messageTable = document.querySelector('#messages_list');
const observer = new IntersectionObserver(function(entries) {
  entries.forEach(function(entry) {
    if (entry.isIntersecting) {
      const messageRow = entry.target;
      messageSeen(messageRow.dataset.messageid);
      observer.unobserve(messageRow);
    }
  });
});

const mutationObserver = new MutationObserver(function(mutations) {
  mutations.forEach(function(mutation) {
    if (mutation.addedNodes) {
      mutation.addedNodes.forEach(function(node) {
        if (node.classList && node.classList.contains('message-row')) {
          observer.observe(node);
        }
      });
    }
  });
});

const observerConfig = { childList: true, subtree: true };
mutationObserver.observe(messageTable, observerConfig);


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookie. –ù—É–∂–Ω–∞, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å csrf —Ç–æ–∫–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ ajax
function getCookie(name) {
  var cookieValue = null;
  if (document.cookie && document.cookie !== '') {
    var cookies = document.cookie.split(';');
    for (var i = 0; i < cookies.length; i++) {
      var cookie = cookies[i].trim();
      // Does this cookie string begin with the name we want?
      if (cookie.substring(0, name.length + 1) === (name + '=')) {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}